Test date: 03/10/23  10:43:47 
The number of times you used the grading program is 3 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Maze Grading System Version 4.0
Student: Last=Qizheng              First=Jin                  Type=Individual          
Grading and testing history log
       User Test.    Date: 03/08/23  19:15:13  maze.01      -            
       User Test.    Date: 03/08/23  19:15:48  maze.02      -            
       User Test.    Date: 03/08/23  19:15:57  maze.03      -            
       User Test.    Date: 03/08/23  19:16:00  maze.04      -            
       User Test.    Date: 03/08/23  19:16:03  maze.05      -            
       User Test.    Date: 03/08/23  19:16:05  maze.06      -            
   *** Grading Run.  Date: 03/08/23  19:16:28 
       User Test.    Date: 03/09/23  14:44:01  maze.04      -            
   *** Grading Run.  Date: 03/09/23  14:44:12 
       User Test.    Date: 03/10/23  10:43:40  maze.01      -            
       User Test.    Date: 03/10/23  10:43:43  maze.02      -            
   *** Grading Run.  Date: 03/10/23  10:43:47 
Testing against the nextval specification
Your code does not meet the nextval specification

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++    0 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
     9  = Number of user tests.                                  
     3  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC6&}xC6&k~C6&juiC6&zuzC6&Zkyz&jgzk@&69576589&&76@:9@:=&



Building the file maze.ans for electronic submission...

;---------------------------------------------------------------------
; Program:   nextval subroutine
;
; Function:  Find next mouse move in an array 15 by 30.
;            We can move into a position if its contents is blank ( 20h ).
;
; Input:     Calling sequence is:
;            x    pointer   si
;            y    pointer   di
;            dir  pointer   bx
;            maze pointer   bp
;
; Output:    x,y,dir modified in caller's data segment
;
; Owner:     Dana A. Lasher
;
; Date:      Update Reason
; --------------------------
; 11/06/2016 Original version
;
;
;---------------------------------------
         .model    small               ;64k code and 64k data
         .8086                         ;only allow 8086 instructions
         public    nextval             ;allow extrnal programs to call
;---------------------------------------


;---------------------------------------
         .data                         ;start the data segment
;---------------------------------------
    max equ 100
    ; 定义结构体 POSITION
    POSITION STRUC
        x dw ?
        y dw ?
    POSITION ENDS
    path_stack dw max dup(?)
    stack_top dw -1
    maze dd 0
    size dw ?

;---------------------------------------
         .code                         ;start the code segment
;---------------------------------------
; Save any modified registers
;---------------------------------------
    assume cs:code, ds:data

    ; 初始化随机数生成器
    mov ax, 0
    mov es, ax
    mov ax, 40h
    mov ds, ax
    mov ax, 0
    mov es:[6Ch], ax

    ; 调用 create_map 函数生成地图
    call create_map

    ; 调用 find_path 函数查找路径
    call find_path

    ; 检查是否找到路径并输出结果
    mov bx, stack_top
    cmp bx, -1
    je no_path
    call print_path
    jmp exit_program

no_path:
    mov ah, 09h
    lea dx, no_path_msg
    int 21h
    jmp exit_program

print_path:
    ; 遍历路径栈并输出路径
    mov cx, bx
    mov di, 0
    print_path_loop:
        mov ax, path_stack[di]
        push ax
        lea dx, path_msg
        call printf
        add di, 4
        loop print_path_loop
    ; 输出终点位置
    mov ax, size
    push ax
    push ax
    lea dx, path_msg
    call printf
    ret

find_path:
    ; 初始化偏移数组 offset
    lea si, offset
    mov di, 0
    mov cx, 4
    init_offset:
        mov ax, [si]
        mov [offset_array+di], ax
        add si, 4
        add di, 4
        loop init_offset

    ; 初始化 here
    mov word ptr [here+POSITION.x], 1
    mov word ptr [here+POSITION.y], 1

    ; 标记起点已走过
    mov bx, [maze+2]
    mov [bx+2], 1

    ; 初始化 option 和 last_option
    mov byte ptr [option], 0
    mov byte ptr [last_option], 3
;---------------------------------------
; Code to make 1 move in the maze
;---------------------------------------
    find_path_loop:
        ; 尝试往四个方向走
        mov si, offset_array
        mov cx, 4
        try_direction:
            ; 计算下一步的坐标
            mov ax, [here+POSITION.x]
            mov dx, [here+POSITION.y]
            add ax, [si+POSITION.x]
            add dx, [si+POSITION.y]
            ; 判断下一步是否可以走
            mov bx, [maze+ax*2+2]
            cmp bx, 0
            jne next_direction
            ; 可以走，入栈并更新 here
            mov bx, stack_top
            add bx, 1
            mov [stack_top], bx
            mov cx, [here+POSITION.x]
            mov dx, [here+POSITION.y]
            mov [path_stack+bx*4], cx
            mov [path_stack+bx*4+2], dx
;---------------------------------------
; Restore registers and return
;---------------------------------------
exit:                                  ;                               
         ret                           ;return
;---------------------------------------
         end
