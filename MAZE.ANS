Test date: 03/13/23  20:29:44 
The number of times you used the grading program is 11 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Maze Grading System Version 4.0
Student: Last=Qizheng              First=Jin                  Type=Individual          
Grading and testing history log
       User Test.    Date: 03/08/23  19:15:13  maze.01      -            
       User Test.    Date: 03/08/23  19:15:48  maze.02      -            
       User Test.    Date: 03/08/23  19:15:57  maze.03      -            
       User Test.    Date: 03/08/23  19:16:00  maze.04      -            
       User Test.    Date: 03/08/23  19:16:03  maze.05      -            
       User Test.    Date: 03/08/23  19:16:05  maze.06      -            
   *** Grading Run.  Date: 03/08/23  19:16:28 
       User Test.    Date: 03/09/23  14:44:01  maze.04      -            
   *** Grading Run.  Date: 03/09/23  14:44:12 
       User Test.    Date: 03/10/23  10:43:40  maze.01      -            
       User Test.    Date: 03/10/23  10:43:43  maze.02      -            
   *** Grading Run.  Date: 03/10/23  10:43:47 
       User Test.    Date: 03/10/23  15:40:35  maze.01      -            
       User Test.    Date: 03/10/23  15:42:16  maze.01      -            
       User Test.    Date: 03/10/23  15:46:53  maze.01      -            
       User Test.    Date: 03/10/23  15:55:18  maze.01      -            
       User Test.    Date: 03/10/23  16:00:45  MAZE.01      -            
       User Test.    Date: 03/10/23  16:13:43  MAZE.01      -            
       User Test.    Date: 03/10/23  16:26:51  maze.01      -            
   *** Grading Run.  Date: 03/10/23  16:41:33 
       User Test.    Date: 03/10/23  16:41:48  maze.01      -            
       User Test.    Date: 03/10/23  16:44:10  maze.01      -            
       User Test.    Date: 03/10/23  16:45:11  maze.01      -            
       User Test.    Date: 03/10/23  16:45:20  maze.01      -            
       User Test.    Date: 03/10/23  20:23:04  maze.01      -            
       User Test.    Date: 03/10/23  20:23:52  maze.01      -            
       User Test.    Date: 03/10/23  20:24:19  maze.01      -            
       User Test.    Date: 03/10/23  20:25:01  maze.01      -            
       User Test.    Date: 03/10/23  20:25:22  maze.01      -            
       User Test.    Date: 03/10/23  20:26:13  maze.01      -            
       User Test.    Date: 03/10/23  20:26:45  maze.01      -            
       User Test.    Date: 03/10/23  20:27:07  maze.01      -            
       User Test.    Date: 03/10/23  20:27:29  maze.01      -            
       User Test.    Date: 03/10/23  20:28:00  maze.01      -            
       User Test.    Date: 03/10/23  20:28:24  maze.01      -            
       User Test.    Date: 03/10/23  20:29:03  maze.01      -            
       User Test.    Date: 03/10/23  20:29:23  maze.01      -            
       User Test.    Date: 03/10/23  20:30:30  maze.01      -            
       User Test.    Date: 03/10/23  20:31:03  maze.01      -            
       User Test.    Date: 03/10/23  20:32:24  maze.01      -            
       User Test.    Date: 03/10/23  20:32:48  maze.01      -            
       User Test.    Date: 03/10/23  20:38:17  maze.01      -            
       User Test.    Date: 03/10/23  20:39:26  maze.01      -            
       User Test.    Date: 03/10/23  20:40:09  maze.01      -            
       User Test.    Date: 03/10/23  20:40:30  maze.01      -            
       User Test.    Date: 03/10/23  20:40:58  maze.01      -            
       User Test.    Date: 03/10/23  20:41:21  maze.01      -            
       User Test.    Date: 03/10/23  20:41:56  maze.01      -            
       User Test.    Date: 03/10/23  20:42:32  maze.01      -            
       User Test.    Date: 03/10/23  20:43:19  maze.01      -            
       User Test.    Date: 03/10/23  20:44:58  maze.01      -            
       User Test.    Date: 03/10/23  20:46:27  maze.01      -            
       User Test.    Date: 03/10/23  20:46:40  maze.01      -            
       User Test.    Date: 03/10/23  20:46:48  maze.01      -            
       User Test.    Date: 03/10/23  20:47:22  maze.01      -            
       User Test.    Date: 03/10/23  20:47:58  maze.01      -            
       User Test.    Date: 03/10/23  20:48:11  maze.01      -            
       User Test.    Date: 03/10/23  20:48:59  maze.01      -            
       User Test.    Date: 03/10/23  20:49:16  maze.01      -            
       User Test.    Date: 03/10/23  20:49:38  maze.01      -            
       User Test.    Date: 03/10/23  20:50:07  maze.01      -            
       User Test.    Date: 03/10/23  20:50:54  maze.01      -            
       User Test.    Date: 03/10/23  20:51:16  maze.01      -            
       User Test.    Date: 03/10/23  20:51:36  maze.01      -            
       User Test.    Date: 03/10/23  20:52:39  maze.01      -            
       User Test.    Date: 03/10/23  20:53:07  maze.01      -            
       User Test.    Date: 03/10/23  20:53:25  maze.01      -            
       User Test.    Date: 03/10/23  20:53:55  maze.01      -            
       User Test.    Date: 03/10/23  20:54:14  maze.01      -            
       User Test.    Date: 03/10/23  20:54:46  maze.01      -            
       User Test.    Date: 03/10/23  20:55:43  maze.01      -            
   *** Grading Run.  Date: 03/12/23  20:49:33 
       User Test.    Date: 03/12/23  20:50:27  maze.01      -            
       User Test.    Date: 03/12/23  21:02:53  maze.01      -            
       User Test.    Date: 03/12/23  21:03:58  maze.01      -            
       User Test.    Date: 03/12/23  21:08:48  maze.01      -            
       User Test.    Date: 03/12/23  21:45:08  maze.01      -            
       User Test.    Date: 03/12/23  21:46:32  maze.01      -            
       User Test.    Date: 03/12/23  21:46:58  maze.01      -            
       User Test.    Date: 03/12/23  21:47:49  maze.01      -            
       User Test.    Date: 03/12/23  21:48:21  maze.01      -            
       User Test.    Date: 03/12/23  21:48:41  maze.01      -            
       User Test.    Date: 03/12/23  21:52:14  maze.01      -            
       User Test.    Date: 03/12/23  21:55:46  maze.01      -            
       User Test.    Date: 03/12/23  21:56:03  maze.01      -            
       User Test.    Date: 03/12/23  21:56:14  maze.01      -            
       User Test.    Date: 03/12/23  21:56:39  maze.01      -            
       User Test.    Date: 03/12/23  21:56:59  maze.01      -            
       User Test.    Date: 03/12/23  22:02:27  maze.01      -            
       User Test.    Date: 03/12/23  22:02:42  maze.01      -            
       User Test.    Date: 03/12/23  22:02:55  maze.01      -            
       User Test.    Date: 03/12/23  22:03:40  maze.01      -            
       User Test.    Date: 03/12/23  22:04:27  maze.01      -            
       User Test.    Date: 03/12/23  22:04:46  maze.01      -            
       User Test.    Date: 03/12/23  22:05:38  maze.01      -            
       User Test.    Date: 03/12/23  22:05:48  maze.01      -            
       User Test.    Date: 03/12/23  22:16:33  maze.01      -            
       User Test.    Date: 03/12/23  22:16:49  maze.01      -            
       User Test.    Date: 03/12/23  22:17:25  maze.01      -            
       User Test.    Date: 03/12/23  22:19:04  maze.02      -            
       User Test.    Date: 03/12/23  22:19:14  maze.03      -            
       User Test.    Date: 03/12/23  22:19:26  maze.04      -            
       User Test.    Date: 03/12/23  22:19:38  maze.03      -            
       User Test.    Date: 03/12/23  22:19:43  maze.04      -            
       User Test.    Date: 03/12/23  22:41:27  maze.03      -            
       User Test.    Date: 03/12/23  22:41:41  maze.04      -            
       User Test.    Date: 03/12/23  22:42:02  maze.01      -            
       User Test.    Date: 03/12/23  22:43:43  maze.01      -            
       User Test.    Date: 03/12/23  22:43:58  maze.01      -            
       User Test.    Date: 03/12/23  22:44:10  maze.01      -            
       User Test.    Date: 03/12/23  22:49:42  maze.01      -            
       User Test.    Date: 03/12/23  22:50:38  maze.01      -            
       User Test.    Date: 03/12/23  22:52:09  maze.01      -            
       User Test.    Date: 03/12/23  22:52:28  maze.01      -            
       User Test.    Date: 03/12/23  22:52:45  maze.01      -            
       User Test.    Date: 03/12/23  22:52:58  maze.03      -            
       User Test.    Date: 03/12/23  22:53:03  maze.04      -            
       User Test.    Date: 03/13/23  16:58:13  maze.01      -            
       User Test.    Date: 03/13/23  16:59:55  maze.01      -            
       User Test.    Date: 03/13/23  17:00:19  maze.01      -            
       User Test.    Date: 03/13/23  17:01:08  maze.01      -            
       User Test.    Date: 03/13/23  17:01:56  maze.01      -            
       User Test.    Date: 03/13/23  17:02:33  maze.01      -            
       User Test.    Date: 03/13/23  17:12:02  maze.01      -            
       User Test.    Date: 03/13/23  17:12:27  maze.01      -            
       User Test.    Date: 03/13/23  17:13:24  maze.01      -            
       User Test.    Date: 03/13/23  17:14:00  maze.03      -            
       User Test.    Date: 03/13/23  17:14:05  maze.04      -            
       User Test.    Date: 03/13/23  17:21:33  maze.04      -            
       User Test.    Date: 03/13/23  17:21:44  maze.01      -            
       User Test.    Date: 03/13/23  17:26:14  maze.01      -            
       User Test.    Date: 03/13/23  17:27:00  maze.02      -            
   *** Grading Run.  Date: 03/13/23  17:28:06 
       User Test.    Date: 03/13/23  19:52:06  maze.03      -            
   *** Grading Run.  Date: 03/13/23  19:52:41 
       User Test.    Date: 03/13/23  20:08:32  maze.03      -            
   *** Grading Run.  Date: 03/13/23  20:09:03 
       User Test.    Date: 03/13/23  20:14:41  maze.01      -            
   *** Grading Run.  Date: 03/13/23  20:15:11 
       User Test.    Date: 03/13/23  20:22:39  maze.02      -            
   *** Grading Run.  Date: 03/13/23  20:23:19 
       User Test.    Date: 03/13/23  20:28:23  maze.02      -            
   *** Grading Run.  Date: 03/13/23  20:29:44 
Testing against the nextval specification
Test completed okay
Testing against non symetrical maze
Test completed okay
Testing against a set of random mazes
Test completed okay
Testing for correct operation and efficiency
Building the maze....
Congratulations! Your mouse has traversed the maze.
 
++ Grade ++   50 = Points earned for correct answers.
Your executed instruction count = 000009949

++ Grade ++    0 = Points earned for code executed efficiency.
Target executed: 15 = 0-4999  10 = 5000-5249  5 = 5250-5499  0 = 5500+ 

++ Grade ++    0 = Points for code written. Your count is:  94.
Target written : 15 = 00-40  10 = 41-45  5 = 46-50  0 = 51+

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0022 The program header format is adequate. 
DOCHB-0.55 Use of code block headers is adequate. 
DOCLC-0.94 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++   70 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
   132  = Number of user tests.                                  
    11  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC;6&}xC6&k~C6&juiC86&zuzC=6&Zkyz&jgzk@&69579589&&86@8?@::&



Building the file maze.ans for electronic submission...

;---------------------------------------------------------------------
; Program:   nextval subroutine
;
; Function:  Find next mouse move in an array 15 by 30.
;            We can move into a position if its contents is blank ( 20h ).
;
; Input:     Calling sequence is:
;            x    pointer   si
;            y    pointer   di
;            dir  pointer   bx
;            maze pointer   bp
;
; Output:    x,y,dir modified in caller's data segment
;
; Owner:     Dana A. Lasher
;
; Date:      Update Reason
; --------------------------
; 11/06/2016 Original version
;
;
;---------------------------------------
         .model    small               ;64k code and 64k data
         .8086                         ;only allow 8086 instructions
         public    nextval             ;allow extrnal programs to call
;---------------------------------------


;---------------------------------------
         .data                         ;start the data segment
;---------------------------------------

;---------------------------------------
         .code                         ;start the code segment
;---------------------------------------

; Save any modified registers
;---------------------------------------
nextval:
;---------------------------------------
; push registers and compare the value of direction
;---------------------------------------
push dx                     ;push in dx
push ax                     ;push in ax
push cx                     ;push in cx
mov dl, byte ptr [bx]       ;dl = *direction
;---------------------------------------
; compare direction value and jump to the block
;---------------------------------------
cmp dl, 1                   ; Compare dL with 1
je testn                    ; If equal, jump to testn
cmp dl,2                    ;Compare dl with 2
je teste                    ;If equal, jump to teste
;---------------------------------------
; compare direction value and jump to the block
;---------------------------------------
cmp dl,3                    ;Compare dl with 3
je tests                    ;If equal, jump to tests
jmp testw                   ;jump to testw
;---------------------------------------
; If direction is 1 , try to move north first
;---------------------------------------
testn:
    mov al, [di]            ; Move y into Al
    sub al, 1               ; Subtract 1 from y
    mov ch, 0               ; set ch = 0
    mov cl, [si]            ; Move x into Bl
    sub cx, 1               ;substract 1 from x
;---------------------------------------
; calculate the offset
;---------------------------------------
    push si                 ;push in si
    mov dl, 1Eh              ; Move 30 into dl
    mul dl                  ; Multiply Al by dl
    add ax, cx              ;(*y-1)*30 + (*x-1)
    sub ax, 1Eh              ; substract 30 from si
;---------------------------------------
; calculate maze[offset-30]
;---------------------------------------
    mov si, ax              ; Add Ax to SI
    mov al, ds:[bp+si]      ; Move maze[si] into AL
    pop si                  ;pop out si
;---------------------------------------
; compare al with space and decide whether to jump or not
;---------------------------------------
    cmp al, ' '             ; Compare AL with ' '
    jne teste               ; If not equal, jump to teste
;---------------------------------------
; If north square is empty, turn north
;---------------------------------------
    mov al, [di]            ; Move y into al
    sub al, 1               ; Subtract 1 from y
    mov [di], al            ; Move al into y
    mov byte ptr [bx], 4    ; Move 4 into the byte pointed to by BX
    jmp exit
;---------------------------------------
; If direction is 2 , try to move east first
;---------------------------------------
teste:
    mov al, [di]            ; Move y into Al
    sub al, 1               ; Subtract 1 from y
    mov ch, 0               ;set ch = 0
    mov cl, [si]            ; Move x into Bl
    sub cx, 1               ;substract 1 from x
;---------------------------------------
; calculate offset
;---------------------------------------
    push si                 ;push in si
    mov dl, 1Eh              ; Move 30 into dl
    mul dl                  ; Multiply Al by dl
    add ax, cx              ;(*y-1)*30 + (*x-1)
    inc ax                  ;ax=ax+1
;---------------------------------------
; calculate maze[offset+1]
;---------------------------------------
    mov si, ax              ; Add Ax to SI
    mov al, ds:[bp+si]      ; Move maze[si] into AL
    pop si                  ;pop out si
;---------------------------------------
; compare al with space and decide whether to jump or not
;---------------------------------------
    cmp al, ' '             ; Compare AL with ' '
    jne tests               ; If not equal, jump to tests
;---------------------------------------
; If east square is empty, turn east
;---------------------------------------
    mov al, [si]            ; Move x into al
    inc al                  ; Add 1 in x
    mov [si], al            ; Move al into x
    mov byte ptr [bx], 1    ; Move 1 into the byte pointed to by BX
    jmp exit                ; jump to the exit
;---------------------------------------
; If direction is 3 , try to move south first
;--------------------------------------
tests:
    mov al, [di]            ; Move y into Al
    sub al, 1               ; Subtract 1 from y
    mov ch, 0               ;set ch = 0
    mov cl, [si]            ; Move x into Bl
    sub cx, 1               ;substract 1 from x
;---------------------------------------
; calculate offset
;---------------------------------------
    push si                 ;push in si
    mov dl, 1Eh              ; Move 30 into dl
    mul dl                  ; Multiply Al by dl
    add ax, cx              ;(*y-1)*30 + (*x-1)
    add ax, 1Eh              ; Add 30 in ax
;---------------------------------------
; calculate maze[offset+30]
;---------------------------------------
    mov si, ax              ; Add Al to SI
    mov al, ds:[bp+si]      ; Move maze[si] into AL
    pop si                  ;pop out si
;---------------------------------------
; compare al with space and decide whether to jump or not
;---------------------------------------
    cmp al, ' '             ; Compare AL with ' '
    jne testw               ; If not equal, jump to testw
;---------------------------------------
; If south square is empty, turn south
;---------------------------------------
    mov al, [di]            ; Move y into al
    inc al                  ; Add 1 in y
    mov [di], al            ; Move al into y
    mov byte ptr [bx], 2    ; Move 1 into the byte pointed to by BX
    jmp exit
;---------------------------------------
; If direction is 4 , try to move west first
;---------------------------------------
testw:
    mov al, [di]            ; Move y into Al
    sub al, 1               ; Subtract 1 from y
    mov ch, 0               ;set ch = 0
    mov cl, [si]            ; Move x into Bl
    sub cx, 1               ;substract 1 from x
;---------------------------------------
; calculate offset
;---------------------------------------
    push si                 ;push in si
    mov dl, 1Eh              ; Move 30 into dl
    mul dl                  ; Multiply Al by dl
    add ax, cx              ;(*y-1)*30 + (*x-1)
    sub ax, 1              ; sub 1 in ax
;---------------------------------------
; calculate maze[offset-1]
;---------------------------------------
    mov si, ax              ; Add Al to SI
    mov al, ds:[bp+si]      ; Move maze[si] into AL
    pop si                  ;pop out si
;---------------------------------------
; compare al with space and decide whether to jump or not
;---------------------------------------
    cmp al, ' '             ; Compare AL with ' '
    jne testn               ; If not equal, jump to testn
;---------------------------------------
; If west square is empty, turn west
;---------------------------------------
    mov cl, [si]            ; Move x into al
    sub cl, 1               ; sub 1 in x
    mov [si], cl            ; Move al into x
    mov byte ptr [bx], 3    ; Move 1 into the byte pointed to by BX
;---------------------------------------
; Restore registers and return
;---------------------------------------
exit:                                  ; 
         pop cx                         ;pop out cx
         pop ax                         ;pop out ax
         pop dx                         ;pop out dx                              
         ret                           ;return
;---------------------------------------
         end
