Test date: 03/22/23  20:56:10 
The number of times you used the grading program is 14 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Linkhll Grading System Version 4.0
Student: Last=qizheng              First=jin                  Type=Individual          
Grading and testing history log
       User Test.    Date: 03/18/23  16:38:34  user_test    testout      
   *** Grading Run.  Date: 03/18/23  16:39:46 
   *** Grading Run.  Date: 03/18/23  16:46:55 
   *** Grading Run.  Date: 03/18/23  16:59:31 
   *** Grading Run.  Date: 03/18/23  17:25:46 
   *** Grading Run.  Date: 03/18/23  17:27:17 
   *** Grading Run.  Date: 03/18/23  17:29:57 
   *** Grading Run.  Date: 03/18/23  20:55:45 
   *** Grading Run.  Date: 03/18/23  20:57:59 
   *** Grading Run.  Date: 03/18/23  21:10:36 
       User Test.    Date: 03/21/23  17:24:31  user_test    testout      
       User Test.    Date: 03/21/23  19:21:03  user_test    testout      
       User Test.    Date: 03/21/23  19:29:06  user_test    testout      
       User Test.    Date: 03/21/23  19:33:44  user_test    testout      
       User Test.    Date: 03/21/23  19:42:38  user_test    testout      
       User Test.    Date: 03/21/23  19:44:20  user_test    testout      
       User Test.    Date: 03/21/23  19:47:24  user_test    testout      
       User Test.    Date: 03/21/23  19:48:10  user_test    testout      
       User Test.    Date: 03/21/23  19:49:33  user_test    testout      
       User Test.    Date: 03/21/23  19:53:26  user_test    testout      
       User Test.    Date: 03/21/23  19:57:21  user_test    testout      
       User Test.    Date: 03/21/23  20:01:11  user_test    testout      
       User Test.    Date: 03/21/23  20:01:58  user_test    testout      
       User Test.    Date: 03/21/23  20:04:54  user_test    testout      
   *** Grading Run.  Date: 03/21/23  20:09:20 
       User Test.    Date: 03/21/23  20:13:31  user_test    testout      
       User Test.    Date: 03/21/23  20:13:42  user_test    testout      
       User Test.    Date: 03/21/23  20:14:19  user_test    testout      
       User Test.    Date: 03/21/23  20:15:20  user_test    testout      
       User Test.    Date: 03/21/23  20:16:27  user_test    testout      
       User Test.    Date: 03/21/23  20:16:58  user_test    testout      
       User Test.    Date: 03/21/23  20:17:56  user_test    testout      
       User Test.    Date: 03/21/23  20:18:20  user_test    testout      
       User Test.    Date: 03/22/23  19:53:30  user_test    testout      
   *** Grading Run.  Date: 03/22/23  20:35:53 
   *** Grading Run.  Date: 03/22/23  20:45:25 
   *** Grading Run.  Date: 03/22/23  20:55:07 
   *** Grading Run.  Date: 03/22/23  20:56:10 

++ Grade ++   60 = Points earned for correct answers.

+  Your executed instruction count per call is = 00018
+   
+  Target instructions executed per call is:
+  20 points 01 - 18 
+  15 points 19 - 20 
+  10 points 21 - 22 
+   5 points 23 - 24 
+   0 points 25+      
+                     
++ Grade ++   20 = Points earned for code executed efficiency!

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0016 The program header format is adequate. 
DOCHB-0.76 Use of code block headers is adequate. 
DOCLC-0.95 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    24  = Number of user tests.                                  
    14  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC6&k~C86&juiC86&zuzC766&Zkyz&jgzk@&69588589&&86@;<@76&

Building the file linkhll.ans for electronic submission...

;-----------------------------------------------------------
;
; Program: Linkhll
;
; Function:The linkhll subroutine will be called from a C program. 
;It will be passed four unsigned words as parameters. As with other C functions, 
;these parameters will be passed on the stack (by value rather than by address). 
;The job of the subroutine is to find the two largest unsigned values and multiply them, creating a 32-bit unsigned product. The resulting, 32-bit product will be returned in the dx:ax register pair.
;
; Owner: Qizheng Jin
;
; Date:
; 11/21/2016   Original Version
;
;
;---------------------------------------
         .model    small               ;
         .8086                         ;
         public    _linkhll            ;
;---------------------------------------

         .data
;---------------------------------------
;
; Data Segment
;
;---------------------------------------

         .code
;---------------------------------------
;
; Code Segment
;
;---------------------------------------
_linkhll: 
    push bp             ; save bp
    mov bp, sp          ; set bp as stack pointer
;---------------------------------------
    ; load parameters into bx, cx, dx, ax
;---------------------------------------  
    mov ax, [bp+10]      ; ax = v4
    mov bx, [bp+8]      ; bx = v3
    mov cx, [bp+6]      ; cx = v2
    mov dx, [bp+4]     ; dx = v1
;---------------------------------------
    ; Check if AX is less than BX
;---------------------------------------  
    cmp ax, bx          ;compare ax and bx
    ja not_less_ax_bx   ;If ax is bigger than bx, it is ok
    xchg ax, bx         ;If not, change the value between them
;---------------------------------------
    ; Check if AX is less than CX
;--------------------------------------- 
not_less_ax_bx:
    cmp ax, cx          ;compare ax and cx
    ja not_less_ax_cx   ;If ax is bigger than cx, it is ok
    xchg ax, cx         ;If not, change the value between them
;---------------------------------------
    ; Check if DX is less than BX
;--------------------------------------- 
not_less_ax_cx:
    cmp dx, bx          ;compare dx and bx
    ja not_less_dx_bx   ;If dx is bigger than bx, it is ok
    xchg dx, bx         ;If not, change the value between them
;---------------------------------------
    ; Check if DX is less than CX
;--------------------------------------- 
not_less_dx_bx:
    cmp dx, cx          ;compare dx and cx
    ja done             ;If dx is bigger than cx, it is ok
    xchg dx, cx         ;If not, change the value between them
done:
    mul dx 
    ; restore registers
    pop bp              ; restore bp
    ret                 ; return
    end                 ; end source code
;---------------------------------------

